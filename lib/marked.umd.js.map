{"version":3,"sources":["../src/marked.ts","../src/defaults.ts","../src/helpers.ts","../src/Tokenizer.ts","../src/rules.ts","../src/Lexer.ts","../src/Renderer.ts","../src/TextRenderer.ts","../src/Slugger.ts","../src/Parser.ts","../src/Hooks.ts","../src/Instance.ts"],"sourcesContent":["import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML synchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML\n */\nexport function marked(src: string, options?: MarkedOptions): string;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(src: string, callback: ResultCallback): void;\n\n/**\n * Compiles markdown to HTML asynchronously with a callback.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n */\nexport function marked(\n    src: string,\n    options: MarkedOptions,\n    callback: ResultCallback,\n): void;\nexport function marked(src: string, opt?: MarkedOptions | ResultCallback, callback?: ResultCallback): string | Promise<string | undefined> | undefined {\n  return markedInstance.parse(src, opt, callback);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Slugger = _Slugger;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Slugger as Slugger } from './Slugger.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './rules.ts';\nexport type * from './Tokens.ts';\n","import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","import type { MarkedOptions } from './MarkedOptions.ts';\nimport type { ResultCallback } from './marked.ts';\nimport type { Rule } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\nexport function edit(regex: Rule, opt?: string) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      val = typeof val === 'object' && 'source' in val ? val.source : val;\n      val = val.replace(caret, '$1');\n      regex = (regex as string).replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nexport function cleanUrl(sanitize: boolean | undefined, base: string | undefined | null, href: string) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls: Record<string, string> = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nexport function resolveUrl(base: string, href: string) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nexport const noopTest = { exec: () => null };\n\nexport function splitCells(tableRow: string, count: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nexport function checkDeprecations(opt: MarkedOptions, callback?: ResultCallback) {\n  if (!opt || opt.silent) {\n    return;\n  }\n\n  if (callback) {\n    console.warn('marked(): callback is deprecated since version 5.0.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/using_pro#async');\n  }\n\n  if (opt.sanitize || opt.sanitizer) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n\n  if (opt.highlight || opt.langPrefix !== 'language-') {\n    console.warn('marked(): highlight and langPrefix parameters are deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-highlight.');\n  }\n\n  if (opt.mangle) {\n    console.warn('marked(): mangle parameter is enabled by default, but is deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install https://www.npmjs.com/package/marked-mangle, or disable by setting `{mangle: false}`.');\n  }\n\n  if (opt.baseUrl) {\n    console.warn('marked(): baseUrl parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-base-url.');\n  }\n\n  if (opt.smartypants) {\n    console.warn('marked(): smartypants parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-smartypants.');\n  }\n\n  if (opt.xhtml) {\n    console.warn('marked(): xhtml parameter is deprecated since version 5.0.0, should not be used and will be removed in the future. Instead use https://www.npmjs.com/package/marked-xhtml.');\n  }\n\n  if (opt.headerIds || opt.headerPrefix) {\n    console.warn('marked(): headerIds and headerPrefix parameters enabled by default, but are deprecated since version 5.0.0, and will be removed in the future. To clear this warning, install  https://www.npmjs.com/package/marked-gfm-heading-id, or disable by setting `{headerIds: false}`.');\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  escape,\n  findClosingBracket\n} from './helpers.ts';\nimport { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token: Tokens.Link = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw: string, text: string) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules: any;\n  lexer!: _Lexer;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [] as Tokens.ListItem[]\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t: string) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      (list.items[list.items.length - 1] as Tokens.ListItem).text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens!.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw!));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | Tokens.Paragraph | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML | Tokens.Paragraph = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        const paragraph = token as unknown as Tokens.Paragraph;\n        paragraph.type = 'paragraph';\n        paragraph.text = text;\n        paragraph.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item: Tokens.Table = {\n        type: 'table',\n        // splitCells expects a number as second argument\n        // @ts-expect-error\n        header: splitCells(cap[1]).map(c => {\n          return { text: c };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i]!)) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i]!)) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i] as unknown as string, item.header.length).map(c => {\n            return { text: c };\n          });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + rLength + 1);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src: string, mangle: (cap: string) => string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src: string, smartypants: (cap: string) => string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n","import {\n  noopTest,\n  edit\n} from './helpers.ts';\n\nexport type Rule = RegExp | string;\n\nexport interface Rules {\n  [ruleName: string]: Pick<RegExp, 'exec'> | Rule | Rules;\n}\n\ntype BlockRuleNames =\n    | 'newline'\n    | 'code'\n    | 'fences'\n    | 'hr'\n    | 'heading'\n    | 'blockquote'\n    | 'list'\n    | 'html'\n    | 'def'\n    | 'lheading'\n    | '_paragraph'\n    | 'text'\n    | '_label'\n    | '_title'\n    | 'bullet'\n    | 'listItemStart'\n    | '_tag'\n    | '_comment'\n    | 'paragraph'\n    | 'uote' ;\n\ntype BlockSubRuleNames = 'normal' | 'gfm' | 'pedantic';\n\ntype InlineRuleNames =\n    | 'escape'\n    | 'autolink'\n    | 'tag'\n    | 'link'\n    | 'reflink'\n    | 'nolink'\n    | 'reflinkSearch'\n    | 'code'\n    | 'br'\n    | 'text'\n    | '_punctuation'\n    | 'punctuation'\n    | 'blockSkip'\n    | 'escapedEmSt'\n    | '_comment'\n    | '_escapes'\n    | '_scheme'\n    | '_email'\n    | '_attribute'\n    | '_label'\n    | '_href'\n    | '_title'\n    | 'strong'\n    | '_extended_email'\n    | '_backpedal';\n\ntype InlineSubRuleNames = 'gfm' | 'emStrong' | 'normal' | 'pedantic'| 'breaks';\n\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const block: Record<BlockRuleNames, Rule> & Record<BlockSubRuleNames, Rules> & Rules = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:(?!^bull ).|\\n(?!\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.lheading = edit(block.lheading)\n  .replace(/bull/g, block.bullet) // lists can interrupt\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table as Rule)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table as RegExp) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph as Rule)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const inline: Record<InlineRuleNames, Rule> & Record<InlineSubRuleNames, Rules> & Rules = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n};\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim as Rule, 'u')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.anyPunctuation = edit(inline.anyPunctuation as Rule, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = edit(inline._escapes, 'gu')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url as Rule, 'i')\n  .replace('email', inline.gfm._extended_email as RegExp)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text as Rule)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MarkedOptions, TokenizerExtension } from './MarkedOptions.ts';\nimport type { Rules } from './rules.ts';\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text: string) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text: string) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: {src: string, tokens: Token[]}[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    // @ts-expect-error\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules(): Rules {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[]): Token[];\n  blockTokens(src: string, tokens?: TokensList): TokensList;\n  blockTokens(src: string, tokens: Token[] = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer: TokenizerExtension['tokenizer']) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape\n} from './helpers.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport { Slugger } from './marked.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  code(code: string, infostring: string | undefined, escaped: boolean): string {\n    const lang = (infostring || '').match(/\\S*/)![0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote: string): string {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html: string, block?: boolean) : string {\n    return html;\n  }\n\n  heading(text: string, level: number, raw: string, slugger: Slugger): string {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr(): string {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body: string, ordered: boolean, start: number | ''): string {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text: string, task: boolean, checked: boolean): string {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked: boolean): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text: string): string {\n    return `<p>${text}</p>\\n`;\n  }\n\n  table(header: string, body: string): string {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content: string): string {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content: string, flags: {\n    header: boolean;\n    align: 'center' | 'left' | 'right' | null;\n  }): string {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong(text: string): string {\n    return `<strong>${text}</strong>`;\n  }\n\n  em(text: string): string {\n    return `<em>${text}</em>`;\n  }\n\n  codespan(text: string): string {\n    return `<code>${text}</code>`;\n  }\n\n  br(): string {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text: string): string {\n    return `<del>${text}</del>`;\n  }\n\n  link(href: string, title: string | null | undefined, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href: string, title: string | null, text: string): string {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href) as any;\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text: string) : string {\n    return text;\n  }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong(text: string) {\n    return text;\n  }\n\n  em(text: string) {\n    return text;\n  }\n\n  codespan(text: string) {\n    return text;\n  }\n\n  del(text: string) {\n    return text;\n  }\n\n  html(text: string) {\n    return text;\n  }\n\n  text(text: string) {\n    return text;\n  }\n\n  link(href: string, title: string | null | undefined, text: string) {\n    return '' + text;\n  }\n\n  image(href: string, title: string | null, text: string) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import type { SluggerOptions } from './MarkedOptions.ts';\n\n/**\n * Slugger generates header id\n */\nexport class _Slugger {\n  seen: { [slugValue: string]: number };\n\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value: string) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug: string, isDryRun: boolean | undefined) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   */\n  slug(value: string, options: SluggerOptions = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport { _defaults } from './defaults.ts';\nimport {\n  unescape\n} from './helpers.ts';\nimport type { Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  slugger: _Slugger;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n    this.slugger = new _Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens) as string,\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer) as string),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            !!token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens)!,\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens)!,\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens)!;\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(!!checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  } as Tokens.Text);\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, !!checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token.text, token.block);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens)!);\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body!) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer?: _Renderer | _TextRenderer): string {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer)!);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string | undefined) {\n    return html;\n  }\n}\n","import { _getDefaults } from './defaults.js';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Slugger } from './Slugger.ts';\nimport {\n  checkDeprecations,\n  escape\n} from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport type ResultCallback = (error: Error | null, parseResult?: string) => undefined | void;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n  parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n\n  Parser = _Parser;\n  parser = _Parser.parse;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  lexer = _Lexer.lex;\n  Tokenizer = _Tokenizer;\n  Slugger = _Slugger;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens <T = void>(tokens: Token[] | TokensList, callback: (token: Token) => T | T[]) {\n    let values: T[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          for (const cell of token.header) {\n            values = values.concat(this.walkTokens(cell.tokens!, callback));\n          }\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens!, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          values = values.concat(this.walkTokens(token.items, callback));\n          break;\n        }\n        default: {\n          if (this.defaults.extensions && this.defaults.extensions.childTokens && this.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n            this.defaults.extensions.childTokens[token.type].forEach((childTokens) => {\n              values = values.concat(this.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(this.walkTokens(token.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: NonNullable<MarkedOptions['extensions']> = this.defaults.extensions || { renderers: {}, childTokens: {} } as NonNullable<MarkedOptions['extensions']>;\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            if (extensions[ext.level]) {\n              extensions[ext.level].unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start!);\n                } else {\n                  extensions.startBlock = [ext.start!];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start!);\n                } else {\n                  extensions.startInline = [ext.start!];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          const prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = (...args: unknown[]) => {\n            let ret = pack.renderer![prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          const prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = (...args: unknown[]) => {\n            let ret = pack.tokenizer![prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          const prevHook = hooks[prop];\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[prop as 'preprocess' | 'postprocess'] = (arg: string | undefined) => {\n              if (this.defaults.async) {\n                return Promise.resolve(pack.hooks![prop].call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = pack.hooks![prop].call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[prop] = (...args) => {\n              let ret = pack.hooks![prop].apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: Array<Promise<void> | void> = [];\n          values.push(pack.walkTokens!.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  #parseMarkdown(lexer: (src: string, options?: MarkedOptions) => TokensList | Token[], parser: (tokens: Token[], options?: MarkedOptions) => string | undefined) {\n    return (src: string, optOrCallback?: MarkedOptions | ResultCallback | undefined | null, callback?: ResultCallback | undefined): string | Promise<string | undefined> | undefined => {\n      if (typeof optOrCallback === 'function') {\n        callback = optOrCallback;\n        optOrCallback = null;\n      }\n\n      const origOpt = { ...optOrCallback };\n      const opt = { ...this.defaults, ...origOpt };\n      const throwError = this.#onError(!!opt.silent, !!opt.async, callback);\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      checkDeprecations(opt, callback);\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (callback) {\n        const highlight = opt.highlight;\n        let tokens: TokensList | Token[];\n\n        try {\n          if (opt.hooks) {\n            src = opt.hooks.preprocess(src);\n          }\n          tokens = lexer(src, opt);\n        } catch (e) {\n          return throwError(e as Error);\n        }\n\n        const done = (err?: Error) => {\n          let out;\n\n          if (!err) {\n            try {\n              if (opt.walkTokens) {\n                this.walkTokens(tokens, opt.walkTokens);\n              }\n              out = parser(tokens, opt)!;\n              if (opt.hooks) {\n                out = opt.hooks.postprocess(out);\n              }\n            } catch (e) {\n              err = e as Error;\n            }\n          }\n\n          opt.highlight = highlight;\n\n          return err\n            ? throwError(err)\n            : callback!(null, out) as undefined;\n        };\n\n        if (!highlight || highlight.length < 3) {\n          return done();\n        }\n\n        delete opt.highlight;\n\n        if (!tokens.length) return done();\n\n        let pending = 0;\n        this.walkTokens(tokens, (token) => {\n          if (token.type === 'code') {\n            pending++;\n            setTimeout(() => {\n              highlight(token.text, token.lang, (err, code) => {\n                if (err) {\n                  return done(err);\n                }\n                if (code != null && code !== token.text) {\n                  token.text = code;\n                  token.escaped = true;\n                }\n\n                pending--;\n                if (pending === 0) {\n                  done();\n                }\n              });\n            }, 0);\n          }\n        });\n\n        if (pending === 0) {\n          done();\n        }\n\n        return;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        const tokens = lexer(src, opt);\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch (e) {\n        return throwError(e as Error);\n      }\n    };\n  }\n\n  #onError(silent: boolean, async: boolean, callback?: ResultCallback) {\n    return (e: Error): string | Promise<string> | undefined => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        if (callback) {\n          callback(null, msg);\n          return;\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      if (callback) {\n        callback(e);\n        return;\n      }\n      throw e;\n    };\n  }\n}\n"],"mappings":"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","names":["lexer","options","text","mangle","smartypants","options","lexer","options","block","options","options","parser","options","args","ret","walkTokens","lexer","parser","src","options"]}